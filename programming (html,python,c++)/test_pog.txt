import tkinter as tk
from tkinter import messagebox, Tk, Label, Entry, Button, Toplevel
#from tkinter.font import Font
from queue import Queue
from tkinter import END


class QueueGUI:

    def __init__(self):

        self.queue = Queue()
        self.window = tk.Tk()
        self.window.title("Queue GUI")

        self.window.geometry("650x400")
        self.window.resizable(False,False)

        self.bbg = tk.PhotoImage(file="16.png")
        self.bbg_button = tk.Label(self.window, image=self.bbg, borderwidth=0)
        self.bbg_button.place(relx=0.5, y=0.5, anchor="center")
        self.label = tk.Label(self.window, text="Queue is empty", font=("Arial Bold", 15))
        self.label.place(x=250, y=200)
        self.entry = tk.Entry(self.window, width=30)
        self.entry.place(x=250, y=60)
        self.enqueue_image = tk.PhotoImage(file="EQB.png")
        self.enqueue_button = tk.Button(self.window, image=self.enqueue_image, command=self.enqueue, borderwidth=0,cursor="hand2")
        self.enqueue_button.place(x=260, y=100)
        self.dequeue_image = tk.PhotoImage(file="DQB.png")
        self.dequeue_button = tk.Button(self.window, image=self.dequeue_image, command=self.dequeue, borderwidth=0, cursor="hand2")
        self.dequeue_button.place(x=100, y=100)
        self.clear_image = tk.PhotoImage(file="CB.png")
        self.clear=tk.Button(self.window, image=self.clear_image, command=self.clear_queue, borderwidth=0, cursor="hand2")
        self.clear.place(x=380, y=100)




    def enqueue(self):
        item = self.entry.get()
        if item:
            self.queue.put(item)
            self.label.config(text=f"Queue: {list(self.queue.queue)}")
            self.entry.delete(0, END)

    def dequeue(self):
        if not self.queue.empty():
            item = self.queue.get()
            self.label.config(text=f"Queue: {list(self.queue.queue)}")
            self.entry.delete(0, END)


    def clear_queue(self):
        self.queue.queue.clear()
        self.label.config(text=f"Queue is empty")




class Stack:
    def __init__(self):
        self.stack = []

    def push(self, number):
        self.stack.append(number)

    def pop(self):
        if len(self.stack) == 0:
            return None
        else:
            return self.stack.pop()

    def size(self):
        return len(self.stack)

    def is_empty(self):
        return len(self.stack) == 0


def main1():
    stack = Stack()  # Create an instance of the Stack class before using it

    def push_item():
        number = entry_stack.get()
        stack.push(number)
        update_stack_text()
        label_size.config(text="The size of the stack is " + str(stack.size()))
        label_is_empty.config(text="Stack is not empty.")
        entry_stack.delete(0, tk.END)  # Clear the entry widget

    def pop_item():
        popped = stack.pop()
        if popped is not None:
            update_stack_text()
            label_size.config(text="The size of the stack is " + str(stack.size()))
            if stack.is_empty():
                label_is_empty.config(text="Stack is empty.")
        else:
            label_is_empty.config(text="Cannot pop from an empty stack.")
        entry_stack.delete(0, tk.END)  # Clear the entry widget

    def update_stack_text():
        stack_text.delete(1.0, tk.END)
        for item in reversed(stack.stack):
            stack_text.insert(tk.END, str(item) + "\n", "center")  # Insert with the "center" tag
            stack_text.tag_configure("center", justify='center')

    stack_window = tk.Tk()
    stack_window.geometry("920x700")
    stack_window.title("STACK")  # Set the title of the GUI window

    label_stack = tk.Label(stack_window, text="Stack")
    label_stack.pack()

    entry_stack = tk.Entry(stack_window)
    entry_stack.pack()

    button_push = tk.Button(stack_window, text="Push", command=push_item)
    button_push.pack()

    button_pop = tk.Button(stack_window, text="Pop", command=pop_item)
    button_pop.pack()

    label_size = tk.Label(stack_window, text="The size of the stack is 0")
    label_size.pack()

    label_is_empty = tk.Label(stack_window, text="Stack is empty.")
    label_is_empty.pack()

    stack_text = tk.Text(stack_window, height=10, width=30)
    stack_text.pack()


def open_new_window():
    new_window = Toplevel(root)
    new_window.geometry("920x700")
    new_window.title("Linear Search - New Window")
    new_window.tk_setPalette(background='#00FFFF')

    def linear_search():
        target = int(entry.get())
        indices = []
        for i in range(len(numbers)):
            if numbers[i] == target:
                indices.append(i)

        if indices:
            result_label.config(text=f"Target value {target} found at indices: {', '.join(map(str, indices))}")
        else:
            result_label.config(text=f"Target value {target} not found in the list.")

    def add_number():
        number = int(add_entry.get())
        numbers.append(number)
        numbers_label.config(text=f"Numbers: {', '.join(map(str, numbers))}")
        add_entry.delete(0, END)

    def clear_list():
        numbers.clear()
        numbers_label.config(text="Numbers: ")
        add_entry.delete(0, END)

    numbers = []

    add_label = Label(new_window, text="Add a number:")
    add_label.place(x=10, y=10)

    add_entry = Entry(new_window)
    add_entry.place(x=150, y=10)

    add_button = Button(new_window, text="Add", command=add_number, cursor="hand2")
    add_button.place(x=300, y=10)

    label = Label(new_window, text="Enter Number to search : ")
    label.place(x=10, y=50)

    entry = Entry(new_window)
    entry.place(x=150, y=50)

    search_button = Button(new_window, text="Search", command=linear_search, cursor="hand2")
    search_button.place(x=300, y=50)

    result_label = Label(new_window, text="")
    result_label.place(x=10, y=90)

    numbers_label = Label(new_window, text=f"Numbers: {', '.join(map(str, numbers))}")
    numbers_label.place(x=10, y=130)

    clear_button = Button(new_window, text="Clear List", command=clear_list, cursor="hand2")
    clear_button.place(x=10, y=170)


class AVLNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1


class AVLTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        self.root = self._insert(self.root, key)

    def _insert(self, node, key):
        if not node:
            return AVLNode(key)
        elif key < node.key:
            node.left = self._insert(node.left, key)
        else:
            node.right = self._insert(node.right, key)

        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))

        balance = self._get_balance(node)

        if balance > 1 and key < node.left.key:
            return self._rotate_right(node)

        if balance < -1 and key > node.right.key:
            return self._rotate_left(node)

        if balance > 1 and key > node.left.key:
            node.left = self._rotate_left(node.left)
            return self._rotate_right(node)

        if balance < -1 and key < node.right.key:
            node.right = self._rotate_right(node.right)
            return self._rotate_left(node)

        return node

    def delete(self, key):
        self.root = self._delete(self.root, key)

    def _delete(self, root, key):
        if not root:
            return root

        elif key < root.key:
            root.left = self._delete(root.left, key)

        elif key > root.key:
            root.right = self._delete(root.right, key)

        else:
            if not root.left:
                temp = root.right
                root = None
                return temp

            elif not root.right:
                temp = root.left
                root = None
                return temp

            temp = self._get_min_node(root.right)
            root.key = temp.key
            root.right = self._delete(root.right, temp.key)

        if not root:
            return root

        root.height = 1 + max(self._get_height(root.left), self._get_height(root.right))

        balance = self._get_balance(root)

        if balance > 1 and self._get_balance(root.left) >= 0:
            return self._rotate_right(root)

        if balance < -1 and self._get_balance(root.right) <= 0:
            return self._rotate_left(root)

        if balance > 1 and self._get_balance(root.left) < 0:
            root.left = self._rotate_left(root.left)
            return self._rotate_right(root)

        if balance < -1 and self._get_balance(root.right) > 0:
            root.right = self._rotate_right(root.right)
            return self._rotate_left(root)

        return root

    def _get_min_node(self, root):
        if root is None or root.left is None:
            return root
        return self._get_min_node(root.left)

    def _get_height(self, node):
        if not node:
            return 0
        return node.height

    def _get_balance(self, node):
        if not node:
            return 0
        return self._get_height(node.left) - self._get_height(node.right)

    def _rotate_right(self, z):
        y = z.left
        T3 = y.right

        y.right = z
        z.left = T3

        z.height = 1 + max(self._get_height(z.left), self._get_height(z.right))
        y.height = 1 + max(self._get_height(y.left), self._get_height(y.right))

        return y

    def _rotate_left(self, z):
        y = z.right
        T2 = y.left

        y.left = z
        z.right = T2

        z.height = 1 + max(self._get_height(z.left), self._get_height(z.right))
        y.height = 1 + max(self._get_height(y.left), self._get_height(y.right))

        return y

    def inorder_traversal(self):
        return self._inorder_traversal(self.root)

    def _inorder_traversal(self, node):
        result = []
        if node:
            result += self._inorder_traversal(node.left)
            result.append(node.key)
            result += self._inorder_traversal(node.right)
        return result


class AVLTreeGUI:
    def __init__(self, root):
        self.avl_tree = AVLTree()
        self.root = root
        self.root.title("AVL Tree Visualization")
        self.canvas = tk.Canvas(self.root, width=820, height=700)
        self.canvas.pack()
        self.key_entry = tk.Entry(self.root)
        self.key_entry.pack()
        self.insert_button = tk.Button(self.root, text="INSERT", command=self.insert_key)
        self.insert_button.pack()
        self.delete_button = tk.Button(self.root, text="DELETE", command=self.delete_key)
        self.delete_button.pack()
        self.inorder_button = tk.Button(self.root, text="PRINT", command=self.inorder_traversal)
        self.inorder_button.pack()

        self.tree_x = 275
        self.tree_y = 50
        self.node_width = 30
        self.node_height = 30
        self.level_height = 50

        self.output_text = tk.Text(self.root, height=4, width=50)
        self.output_text.pack()

    def insert_key(self):
        try:
            key = int(self.key_entry.get())
            self.avl_tree.insert(key)
            self.key_entry.delete(0, tk.END)
            self.draw_tree()
        except ValueError:
            self.show_error("Invalid key!")

    def delete_key(self):
        try:
            key = int(self.key_entry.get())
            self.avl_tree.delete(key)
            self.key_entry.delete(0, tk.END)
            self.draw_tree()
        except ValueError:
            self.show_error("Invalid key!")

    def inorder_traversal(self):
        result = self.avl_tree.inorder_traversal()
        self.output_text.delete(1.0, tk.END)
        self.output_text.insert(tk.END, "Inorder Traversal: " + " -> ".join(str(key) for key in result))

    def show_error(self, message):
        self.output_text.delete(1.0, tk.END)
        self.output_text.insert(tk.END, "Error: " + message)

    def draw_tree(self):
        self.canvas.delete("all")
        self._draw_tree(self.avl_tree.root, self.tree_x, self.tree_y, self.node_width, self.node_height)

    def _draw_tree(self, node, x, y, width, height):
        if node:
            self.canvas.create_oval(x, y, x + width, y + height, fill="lightblue", outline="lightblue")
            self.canvas.create_text(x + width / 2, y + height / 2, text=str(node.key), fill="black")

            if node.left:
                x_left = x - (2 ** (self.avl_tree._get_height(node) - 2)) * width
                y_left = y + self.level_height
                self.canvas.create_line(x + width / 2, y + height, x_left + width / 2, y_left)
                self._draw_tree(node.left, x_left, y_left, width, height)

            if node.right:
                x_right = x + (2 ** (self.avl_tree._get_height(node) - 2)) * width
                y_right = y + self.level_height
                self.canvas.create_line(x + width / 2, y + height, x_right + width / 2, y_right)
                self._draw_tree(node.right, x_right, y_right, width, height)


def avul():
    if __name__ == "__main__":
        root = tk.Tk()
        avl_tree_gui = AVLTreeGUI(root)


# --------------------------------------------------------------------------------------------------------------------------------------------

def BST1():
    class BSTNode:
        def __init__(self, key):
            self.key = key
            self.left = None
            self.right = None

    # Binary Search Tree
    class BST:
        def __init__(self):
            self.root = None

        def insert(self, key):
            self.root = self._insert(self.root, key)

        def _insert(self, root, key):
            if root is None:
                return BSTNode(key)
            if key < root.key:
                root.left = self._insert(root.left, key)
            elif key > root.key:
                root.right = self._insert(root.right, key)
            return root

        def delete(self, key):
            self.root = self._delete(self.root, key)

        def _delete(self, root, key):
            if root is None:
                return root
            if key < root.key:
                root.left = self._delete(root.left, key)
            elif key > root.key:
                root.right = self._delete(root.right, key)
            else:
                if root.left is None:
                    return root.right
                elif root.right is None:
                    return root.left
                min_node = self._find_min(root.right)
                root.key = min_node.key
                root.right = self._delete(root.right, min_node.key)
            return root

        def _find_min(self, node):
            while node.left is not None:
                node = node.left
            return node

        def search(self, key):
            return self._search(self.root, key)

        def _search(self, root, key):
            if root is None or root.key == key:
                return root
            if key < root.key:
                return self._search(root.left, key)
            return self._search(root.right, key)

    class GUIApp:
        def __init__(self, root):
            self.bst = BST()
            self.root = root
            self.root.title("Binary Search Tree")
            self.root.geometry("920x700")

            self.entry_label = tk.Label(self.root, text="Enter a value:")
            self.entry_label.pack()

            self.entry = tk.Entry(self.root)
            self.entry.pack()

            self.insert_button = tk.Button(self.root, text="Insert", command=self.insert_value)
            self.insert_button.pack()
            self.delete_button = tk.Button(self.root, text="Delete", command=self.delete_value)
            self.delete_button.pack()

            self.search_button = tk.Button(self.root, text="Search", command=self.search_value)
            self.search_button.pack()

            self.canvas = tk.Canvas(self.root, width=350, height=500)
            self.canvas.pack()

        def insert_value(self):
            value = int(self.entry.get())
            self.bst.insert(value)
            self.display_tree()

        def delete_value(self):
            value = int(self.entry.get())
            if self.bst.search(value):
                self.bst.delete(value)
                self.display_tree()
            else:
                messagebox.showerror("Error", "Value not found in the tree.")

        def search_value(self):
            value = int(self.entry.get())
            if self.bst.search(value):
                messagebox.showinfo("Search Result", "Value found in the tree.")
            else:
                messagebox.showinfo("Search Result", "Value not found in the tree.")

        def display_tree(self):
            self.canvas.delete("all")
            if self.bst.root is not None:
                self.display_node(self.bst.root, 200, 20, 100)

        def display_node(self, node, x, y, gap):
            radius = 20
            self.canvas.create_oval(x - radius, y - radius, x + radius, y + radius, fill="white", outline="black")
            self.canvas.create_text(x, y, text=str(node.key))
            if node.left is not None:
                self.canvas.create_line(x, y + radius, x - gap, y + 100, width=2)
                self.display_node(node.left, x - gap, y + 100, gap // 2)
            if node.right is not None:
                self.canvas.create_line(x, y + radius, x + gap, y + 100, width=2)
                self.display_node(node.right, x + gap, y + 100, gap // 2)

    if __name__ == "__main__":
        root = tk.Tk()
        app = GUIApp(root)
        root.mainloop()


def BS():
    def binary_search(arr, target):
        low = 0
        high = len(arr) - 1

        while low <= high:
            mid = (low + high) // 2
            if arr[mid] == target:
                return True
            elif arr[mid] < target:
                low = mid + 1
            else:
                high = mid - 1

        return False

    def add_number():
        number = int(entry.get())
        numbers.append(number)
        status_label.config(text="Number added: {}".format(number))
        entry.delete(0, END)

    def delete_number():
        number = int(entry.get())
        if number in numbers:
            numbers.remove(number)
            status_label.config(text="Number deleted:  {}".format(number))
        else:
            status_label.config(text="Number not found:  {}".format(number))
        entry.delete(0, END)

    def search_number():
        number = int(entry.get())
        if binary_search(numbers, number):
            status_label.config(text="Number found: {}".format(number))
        else:
            status_label.config(text="Number not found: {}".format(number))

    def print_numbers():
        status_label.config(text="Numbers: {}".format(numbers))

    numbers = []

    root = Tk()
    root.geometry("920x700")
    root.title("Binary Search")

    label = Label(root, text="INPUT HERE:")
    label.place(x=10, y=10)

    entry = Entry(root, width=30)
    entry.place(x=100, y=10)

    add_button = Button(root, text="Add", command=add_number)
    add_button.place(x=100, y=40)

    delete_button = Button(root, text="Delete", command=delete_number)
    delete_button.place(x=140, y=40)

    search_button = Button(root, text="Search", command=search_number)
    search_button.place(x=190, y=40)

    print_button = Button(root, text="Print", command=print_numbers)
    print_button.place(x=245, y=40)

    status_label = Label(root, text="")
    status_label.place(x=10, y=70)


# ----------------------------------------------------------------------------------------------------
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, data):
        if self.root is None:
            self.root = Node(data)
        else:
            self._insert_recursive(data, self.root)

    def _insert_recursive(self, data, node):
        if data < node.data:
            if node.left is None:
                node.left = Node(data)
            else:
                self._insert_recursive(data, node.left)
        elif data > node.data:
            if node.right is None:
                node.right = Node(data)
            else:
                self._insert_recursive(data, node.right)

    def preorder_traversal(self):
        return self._preorder_recursive(self.root)

    def _preorder_recursive(self, node):
        result = []
        if node is not None:
            result.append(node.data)
            result += self._preorder_recursive(node.left)
            result += self._preorder_recursive(node.right)
        return result

    def inorder_traversal(self):
        return self._inorder_recursive(self.root)

    def _inorder_recursive(self, node):
        result = []
        if node is not None:
            result += self._inorder_recursive(node.left)
            result.append(node.data)
            result += self._inorder_recursive(node.right)
        return result

    def postorder_traversal(self):
        return self._postorder_recursive(self.root)

    def _postorder_recursive(self, node):
        result = []
        if node is not None:
            result += self._postorder_recursive(node.left)
            result += self._postorder_recursive(node.right)
            result.append(node.data)
        return result


class GUIApp:
    def __init__(self, root):
        self.root = root
        self.tree = BinaryTree()

        self.canvas = tk.Canvas(root, width=800, height=600, bg="white")
        self.canvas.pack()

        self.entry = tk.Entry(root)
        self.entry.pack()

        self.insert_button = tk.Button(root, text="Insert", command=self.insert_data)
        self.insert_button.pack()

        self.preorder_button = tk.Button(root, text="Preorder", command=self.preorder)
        self.preorder_button.pack()

        self.inorder_button = tk.Button(root, text="Inorder", command=self.inorder)
        self.inorder_button.pack()

        self.postorder_button = tk.Button(root, text="Postorder", command=self.postorder)
        self.postorder_button.pack()

    def insert_data(self):
        data = self.entry.get()
        try:
            data = int(data)
            self.tree.insert(data)
            self.draw_tree()
            self.entry.delete(0, tk.END)
        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter an integer.")

    def draw_tree(self):
        self.canvas.delete("all")
        if self.tree.root is not None:
            self._draw_tree_recursive(self.tree.root, 400, 50, 400)

    def _draw_tree_recursive(self, node, x, y, h_gap=400):
        radius = 20
        self.canvas.create_oval(x - radius, y - radius, x + radius, y + radius, fill="lightblue")
        self.canvas.create_text(x, y, text=str(node.data))

        if node.left is not None:
            x_left = x - h_gap // 2
            y_left = y + 50
            self.canvas.create_line(x, y + radius, x_left, y_left - radius, width=2, arrow=tk.LAST)
            self._draw_tree_recursive(node.left, x_left, y_left, h_gap // 2)

        if node.right is not None:
            x_right = x + h_gap // 2
            y_right = y + 50
            self.canvas.create_line(x, y + radius, x_right, y_right - radius, width=2, arrow=tk.LAST)
            self._draw_tree_recursive(node.right, x_right, y_right, h_gap // 2)

    def preorder(self):
        result = self.tree.preorder_traversal()
        messagebox.showinfo("Preorder Traversal", " ".join(str(x) for x in result))

    def inorder(self):
        result = self.tree.inorder_traversal()
        messagebox.showinfo("Inorder Traversal", " ".join(str(x) for x in result))

    def postorder(self):
        result = self.tree.postorder_traversal()
        messagebox.showinfo("Postorder Traversal", " ".join(str(x) for x in result))


def BT():
    if __name__ == "__main__":
        root = tk.Tk()
        root =GUIApp(root)
        root.mainloop()



queue_gui = QueueGUI()
queue_gui.window.mainloop()

# ---------------------------------------------------------------------------------------------------------------------------------#
root = tk.Tk()
root.title("Login and Home Page")
root.geometry("920x700")

bgtop_Image = tk.PhotoImage(file='ustp.png')
bgtop_Label = tk.Label(image=bgtop_Image)

Queue_Image = tk.PhotoImage(file='6.png')
Queue_Label = tk.Label(image=Queue_Image)


Stack_Image = tk.PhotoImage(file='5.png')
Stack_Label = tk.Label(image=Stack_Image)

linar_Image = tk.PhotoImage(file='8.png')
linar_Label = tk.Label(image=linar_Image)

avl_Image = tk.PhotoImage(file='12.png')
avl_Label = tk.Label(image=avl_Image)

bst_Image = tk.PhotoImage(file='11.png')
bst_Label = tk.Label(image=bst_Image)

bs_Image = tk.PhotoImage(file='9.png')
bs_Label = tk.Label(image=bs_Image)

bt_Image = tk.PhotoImage(file='10.png')
bt_Label = tk.Label(image=bt_Image)

bgds = tk.PhotoImage(file='Bg_Menu.png')
bg_Label = tk.Label(image=bgds)
bg_image = tk.Label(root, image=bgds, borderwidth=0)
bg_image.place(relx=0.5, rely=0.5, anchor="center")

Labell = tk.Label(root, image=bgtop_Image, borderwidth=0)
Labell.place(relx=0.5, rely=0.12, anchor="center")

ustp = Label(root, text="Computer Programming 2 And Data Structures and Algorithm", font=("Arial Bold", 17), bg='White')
ustp.place(relx=0.57, rely=0.20, anchor="center")

Queue_Button = tk.Button(root, image=Queue_Image, command=QueueGUI, borderwidth=0, cursor="hand2")
Queue_Button.place(relx=0.11, rely=0.35)


Queue_Button = tk.Button(root, image=Stack_Image, command=main1, borderwidth=0, cursor="hand2")
Queue_Button.place(relx=0.33, rely=0.35)

Queue_Button = tk.Button(root, image=linar_Image, command=open_new_window, borderwidth=0, cursor="hand2")
Queue_Button.place(relx=0.55, rely=0.35)

Queue_Button = tk.Button(root, image=avl_Image, command=avul, borderwidth=0, cursor="hand2")
Queue_Button.place(relx=0.77, rely=0.35)

Queue_Button = tk.Button(root, image=bst_Image, command=BST1, borderwidth=0, cursor="hand2")
Queue_Button.place(relx=0.11, rely=0.7)

Queue_Button = tk.Button(root, image=bs_Image, command=BS, borderwidth=0, cursor="hand2")
Queue_Button.place(relx=0.33, rely=0.7)

Queue_Button = tk.Button(root, image=bt_Image, command=BT, borderwidth=0, cursor="hand2")
Queue_Button.place(relx=0.55, rely=0.7)

Queue_Button = tk.Button(root, image=bt_Image, command=BT, borderwidth=0, cursor="hand2")
Queue_Button.place(relx=0.77, rely=0.7)

root.mainloop()